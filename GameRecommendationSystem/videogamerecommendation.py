# -*- coding: utf-8 -*-
"""VideoGameRecommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dKO36jF4XSVSvXuEVdg9j0koa12A27Yr

# Universal Sentence Encoder
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
import tensorflow_hub as hub

# plotting
import matplotlib.pyplot as plt

import os
import re
import numpy as np
import pandas as pd
import plotly.graph_objects as go

# scikit-learn
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.neighbors import NearestNeighbors
from sklearn.decomposition import PCA

model_url = "https://tfhub.dev/google/universal-sentence-encoder/4"
model = hub.load(model_url)

df = pd.read_csv('drive/MyDrive/MetacriticPCGamesofAllTime.csv')
# df = df.loc[:, ['title', 'critic_reviews']]
df = df.dropna(subset='critic_reviews')
df = df.reset_index(drop=True)

df.head()

df.critic_reviews = df.critic_reviews.apply(lambda x: eval(x))
df.critic_reviews = df.critic_reviews.apply(lambda x: "".join(x))

df.loc[1,"summary"]

critic_scores = model(df.critic_reviews)

critic_scores[0]

pca = PCA(n_components=3)
data_pca = pca.fit_transform(critic_scores)

data_pca

# Extract PCA components
x_pca = data_pca[:, 0]
y_pca = data_pca[:, 1]
z_pca = data_pca[:, 2]

# Create the 3D scatter plot
fig = go.Figure(data=[go.Scatter3d(
    x=x_pca,
    y=y_pca,
    z=z_pca,
    mode='markers',
    marker=dict(
        size=8,
        color=z_pca,
        colorscale='Viridis',
        opacity=0.8,
    )
)])

fig.add_trace(go.Scatter3d(
    x=[0],
    y=[0],
    z=[0],
    mode='markers',
    marker=dict(
        size=12,
        color='red',
        opacity=1.0,
    ),
    name='Desired Point'
))


# Set axis labels
fig.update_layout(scene=dict(xaxis_title='PC1', yaxis_title='PC2', zaxis_title='PC3'))

# Show the plot
fig.show()

critic_scores

nn = NearestNeighbors(n_neighbors=10)
nn.fit(critic_scores)

user_text = "good level design"
user_text = [user_text]
user_text_scores = model(user_text)
recommendations = nn.kneighbors(user_text_scores, return_distance=False)
print(recommendations)
df.iloc[recommendations[0],:].sort_values(by='metascore', ascending=False)